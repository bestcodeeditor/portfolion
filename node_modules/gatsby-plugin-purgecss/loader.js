'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // modified from https://github.com/americanexpress/purgecss-loader

/**
 * @typedef {import('loader-utils').OptionObject} OptionObject
 */

exports.default = loader;

var _purgecss = require('purgecss');

var _purgecss2 = _interopRequireDefault(_purgecss);

var _loaderUtils = require('loader-utils');

var _shared = require('./shared');

var _shared2 = _interopRequireDefault(_shared);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function loader(source) {
  // prettier-ignore
  const options =
  /** @type {OptionObject & {content:string[], rejected?:boolean}} */
  (0, _loaderUtils.getOptions)(this);

  const css = new _purgecss2.default(_extends({
    css: [{ raw: source, extension: 'css' }]
  }, options)).purge();

  if (options.rejected) {
    const rejected = css[0].rejected;

    _shared2.default.add(rejected.length);

    if (options.printRejected && Array.isArray(rejected)) {
      const filtered = rejected.map(val => {
        return val.replace('\n', '');
      });
      console.log('\nRemoved Selectors: ', filtered);
    }
  }

  return css[0].css;
}